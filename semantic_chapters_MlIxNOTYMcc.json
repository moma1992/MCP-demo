{
  "video_id": "MlIxNOTYMcc",
  "total_duration_seconds": 4384.36,
  "total_duration_formatted": "01:13:04",
  "total_chapters": 8,
  "analysis_method": "gemini_semantic",
  "segment_duration": 600,
  "chapters": [
    {
      "index": 1,
      "start_seconds": 0,
      "end_seconds": 602.24,
      "start_timestamp": "00:00:00",
      "end_timestamp": "00:10:02",
      "duration_seconds": 602.24,
      "original_text": " あ、こんにちは、こんばんは。 今日もライブ配信始めていきたいと思い ます。 ちょっとまずですね、音声チェックの方 から 今日はちょっと1時間半ぐらいをメドに やっていきたいと思います。 またいつも通り スマホからちょっと音声だけ確認させて ください。 お上がってる。 さあ 、いい感じすね。 今日は安定してそう。 えっとですね、 あ、今日もちょっとまたAえっとやらない ゲームしていこうと思います。Aっとやら ないゲームをですね、やり始めるとですね 、今日は まあ言っちゃうんですよね。 じゃ、今日はAとまあ言わないゲームを ちょっとしながら、え、ライブはい。じゃ 、今日はですね、また詳細解説 ですけど。はい。え、 今日のですね、 え、タイトルはい 、行動。えっと、ですね、ちょっと待って くださいね。はい、閲覧注意。え、コード を書いてるだけのエンジニアはい、5年後 確実にされます。え、AWSキロが示した AI時代の生存戦略とはっていうところで 、え、お話ししていけたらなと思います。 はい。 ま、さよなら。バイブコーディングという ことで、 これはバイブコーディングの、え、ライブ 配信のチャンネルだったんじゃないかなと 思われてる方もおられますが、一応AI 駆動開発の、え、ライブコーディング図れ してきた頃じゃないでしょうかと。こう ですね、ま、AWS、ま、Amazon ですよね。AmazonWebブサービス さん、あの、戦略このタイミングにこう いうもうエディターを 投入してきたんじゃないかなって思う ぐらい、え、かなりいいタイミングでです ね、このもうモバイブコーディングじゃ ないよっていう、もうアンチ停みたいな やつをですね、がコンセプトな、え、 コーディングアシスタント エディターをですね、エデターをですね、 このタイミで投入してきたんだっていう ですね、結構面白い 、え、また風が吹いてるんですけど、 ま、今日はメインはですね、え、あ、えっ て言ってしまいましたね。AWSKOロっ ていうですね、3日前ぐらいに、え、 リリースされた、え、AmazonWeb サービスから出た、え、エリタになります 。 じゃ、今日はですね、ちなみにですね、僕 これ今日でもしようかなと思って、実際に 使ってる風景をですね、ライブ コーディングで流そうかなって思ったん ですけど、あの、インストールするのが ですね、ちょっと遅れちゃって、今 あの、ウィッシュリストに入っちゃってる んですよね。なんで今インストールでき ないので、ま、今日はですね、ま、あの、 詳細解説っていう部分 ちょっと皆さんと見ていけたらなと思い つつで、えっと、 製品サイトがあるので、ま、そこにデモ 動画載ってたので、ちょっとそれ見ながら 、あの、実況したいなと思います。ま、な ので今日はですね、インストールの方法と か、あの、ま、設定とか、え、実際に何か を作るっていうところはないんですけど、 ま、この、ま、概念的なコンセプト的な ところをですね、深掘りしながら、え、 エンジニアの仕事がますます、え、 こうどんどんどんどんですね、AIがこう やってくれるようになってるっていう現状 とかも、まがありますので、ま、その辺も ですね、あの、今まだAI駆動開発に手を 出されていないエンジニアの方であったり 、え、AI実はそんなに使ってないんだよ ねっていう方とか、え、ま、逆にですね、 あの、エンジニア以外の方でですね、これ から、え、なんかアプリ開発とかもやって みたいなって思われているビジネスマンの 方とかですね、あの、これ見ていただくと あれ、そこまで難しくないんじゃないか なって思う部分もあるので、あの、是非 ですね、こういう新しい 、え、ツールの解説っていうのをちょっと 聞いてみて、聞いてみて欲しいなと思い ます。 じゃ、それではスライドをですね、今日も 、え、ジェンスパークで、え、作ってくれ ているので、ちょっと見ていきましょう。 あ、 ジェンスパークかなり優秀ですね。 はい。プレイスライドの方に移りますかね 。 秘宝エンジニアがもう行動書かなくなる タイトルがですね、結構面白いんですけど 。はい。AWSの新AIエデターキロが 開発の常識を全て破壊するっていうところ を書いてくれてます。はい。え、 ちっちゃくコードの書き方変わりますって 書いてくれてますね。 はい。ま、まず最初あなたの行動雰囲気で 書いてませんかっていうところで、え、1 スライド目は問題定期っぽいんですけど はい。この涙流してる絵文字が言ってるの がとりあえず動くけど、え、使用書は後で と で目がバツになっちゃってる子がこの コード書いたけど自分でもなんで動くか わからん。書いた自分でもなぜ動くか 分からんとはい。なんかエラーとか障害が あって また自分の書いたコード見に行ったんです かね。はい。テスト時間があれば ねんてんてん。はい。ていうことで、ま、 これがですね、実際のところこう ソフトウェア開発でですね、ま、全部とは 言わないです。はい。ちゃんと使用書きれ に書かれてるところもあるし、え、 ちゃんとですね、コードの、ま、コード オーナーというか、プロダクトオーナー 責任を持って、え、説明できる方もおられ ますし、はい。テストもちゃんと、え、 かけてるところもありますが、ま、 エンジニアの方ですと、こういう 、ま、光景は結構要因に想像がつくんじゃ ないでしょうか。はい。その開発手法も 時代遅れですっていうところで、ま、 雰囲気で書かれた行動は未来の負債になる というところですね。これ 今までのこの今までのっていうか今流行り 流行ってるバイブコーディングっていう 言葉よりも全然以前のですね、あのダメな 現場のパターンですね。ダメな プロジェクトのはい。エンジニアの こうそうですね、プロジェクトのパターン をえ、この1枚のスライドに表してくれて ますがはい。結局はですね、あの負債 だらけになっていくんですよね。で、これ がですね、長ければ長いほど、え、人は 入れ替わり、え、もうすでに買いた人はい ないし、仕様を誰に聞いても分からないし 、え、ビジネスサイドからは質問や クレームが飛んでくるし、っていうことで ですね、結構あの、ま、燃えてる プロジェクトはこういう感じになってます 。 で、特にですね、 え、 開発現場でですね、実際に 普通に考えればまず設計を、ま、要件を ですね、え、洗って要件を出して言語化し てで、そこから設計をしてで、ま、使用書 とかに落としてまず、え、設計図のような 資料が多分できると思うんですよ。で、 そこから開発が始まってくるはずなんです けど、実はですね、これはちょっと IT業界あるあるなんですけど、こうそう いうドキュメントいわゆる設計系の マテリアルがない場合もあるという、ま、",
      "topic_category": "技術解説",
      "title": "AI駆動開発とAWSキロ",
      "summary": "AWSキロの紹介とAI時代のエンジニアの生存戦略",
      "key_points": [
        "AWSキロ解説",
        "AI駆動開発",
        "従来開発の問題点"
      ],
      "technical_level": "intermediate",
      "contains_demo": false,
      "contains_code": false
    },
    {
      "index": 2,
      "start_seconds": 602.24,
      "end_seconds": 1202.76,
      "start_timestamp": "00:10:02",
      "end_timestamp": "00:20:02",
      "duration_seconds": 600.52,
      "original_text": "怖い状況もあります。で、これは大きな プロジェクトでもそうですし、ま、個人 開発でドキュメントをちゃんと作ってやる 人っていうのはなかなかいないと思います 。ま、まずはコードを書いてちょっと とりあえず動かすところまでやってみて、 で、ま、ちょっとドキュメントでも書いて みようかなぐらいの感じの方が、ま、多い んじゃないでしょうか。で、ま、こういう のをですね、この今回の場合雰囲気、ま、 バイブで書かれたコーディングだったり 開発だったりプロジェクトバイブ プロジェクトなわけですよ。で、ま、どう してもですね、後から要件が変わってくる とかですね、クライアントの、え、移行が 変わってくるとか、え、そういうことも 全然あります。プロジェクトが走りながら どんどん変わっていくっていうことは全然 ありますし、ま、そこはどうしてもですね 、避けて通れない部分では、え、あるかも しれませんが、ま、こういう負債をですね 、抱えたまま、え、プロジェクトが どんどん進んでいくっていうところはです ね、現実にはかなりあります。はい。で、 これはもう時代遅れっていうことをですね 、え、言ってくれてます。はい。じゃあ このAWSキロっていうのはですね、この 、ま、新時代を軽開く課税なんですけど、 ま、単なるAI保管ツールじゃないわけ です。はい。まず開発手法がですね、 コンセプトがこのキロっていうエデターは 持ってるんです。で、AIが設計図から 一緒に作る新世代の相棒としてこのキロ キロ君はですね、誕生しました。はい。え 、コンセプトはですね、バイブ コーディングから価値あるバイアブル コードへっていうことですね。雰囲気から ちゃんと価値あるもの、価値あるコード 作っていこうやないかっていうコンセプト のもこのエディタは生まれてるわけですね 。ま、AIエディターはい。 で、ま、この何もんなんやっていう正体な んですけど、え、これ、ま、後でですね、 デモ、デモサイトというかサイトに ちょっと行ってどういう雰囲気のエデター なのかをちょっと、え、皆さんと一緒に見 ていきたいなと思うんですけど。 はい。VSCD5巻のですね、AI搭載の 統合開発環境で、ま、よくあるエディター です。パソルとか、え、VSコードとか、 え、その単に色々あるかもしれないんです けど、はい。似たような感じの、え、 ツール見た目上は同じ感じのエディターに なります。はい。で、今ならですね、 プレビュー版が完全無料っていうことです ね。あの、今日ちゃんと冒頭でも言ったん ですけど、インストールしようかなって 思ったら多分人気ですぎて、今あの、 ウィッシュリストに登録して、あの、連絡 来ないとダウンロードできないっていう 感じに、え、なっているので、ちょっと しばらく待ちたいと思います。ま、出て3 日ぐらいなんですけどね、もう大人気って いうところですね。 はい。このニューウェブAWSキロがはい 。この昨今もバイブコーディング扇風が クロードコードによって巻き こうま、繰り広げられてたところにですね 。はい。アンチ定勢としてこのキロがAI コーディング戦争をですね、こう また 新しい風を吹かしに来たというところです ね。 はい。で、白のですね、ま、心臓部という ところで、ま、先ほども設計図から作る よっていうところだったんですけど、え、 ま、この機能は使用書 駆動開発、スペックドリブン開発っていう のをですね、え、掲げております。はい。 で、もうAIに丸投げしないって書いて あるんですけど、プロンプト1発でAIが 完璧な設計図を提案してくれるんですよ。 はい。で、これクロードコードでバイブ コーディングやった時も、ま、最初に要件 定義をして、で、その要件定義から、え、 決められた機能を実現するために、ま、 基本設計であったり、詳細設計みたいな ところに落とし込んで、で、それを僕は、 え、Gitッハubのですね、一周、 フィーチャー一isとかに書き込んでたん ですけどはい。ヒロはですね、もうそう いう1年の流れをですね、すにもう持って いるんです。このワークフローの流れで まず、ま、例えば、え、ま、僕がこの機能 のこうユーザーだとして製品レビュー機能 を追加してっていうところをですね、ま、 言ったとします。そうするとキロがまず 要件定義をしてくれます。ユーザー ストーリーを自動生成して、で、そこから 、え、データ構造とかAPI設計、ま、 詳細設計までやってくれます。で、その 設計した内容に対して作業をちゃんと リスト化して、え、タスクに落とすって いうところまでですね、え、記録1発で やってしまいますっていうところで、ま、 これをですね、はい、クロードコードで僕 は、え、 自分で順番を作りながらはい。クロード コードと対話しながら作ってたんですけど 、もうこの要件定義設計タスクかはい。1 発でできるそうです。で、人間はこれを レビューするだけなんですね。で、まず 最初に何をするのか、タスク作るところ までどういう要件でやるのか、どういう 具体的な設計になってるのかを人間がまず チェックする。ここが大事ですね。 はい。これ完全に全部ですね、AIにやら せてしまうとあれ、これなんでこの仕様に なってたっけなとか、この設計よりこっち の方が良かったのにって後で気づくことが あるんですけど。で、僕はそれやりたく なかったのでクロードコードのバイブ コーディングの方では先に全部定義してた んですね。ただそれですと、えっと、結構 ですね、時間かかります。あの、 ちょっとバイブコーディングやってた時も これ本当にバイブコーディングなのかなっ て思いながら結構しっかりやってたので、 ま、時間かかったりします。ただキロは ここがすんなりと、え、もうすでにこう いう前提で作られてるエディタなので、え 、流れがスムーズにできるということです ね。 はい。ということで2番目、機能の心臓部 というところですね。エージェントフック 機能っていうのがあります。はい。これは ですね、あなたの代わりに優秀な エージェントたちが働くて書いてあります けど、具体的に何かって言うと、はい、 自動テストの生成実行コミット前にですね 、自動でテストを生成実行するっていう ところがですね、え、フック機能として もうついてます。で、ドキュメントの自動 更新、コードドキュメントの同時同機を、 え、自動で維持します。これですね、結構 嬉しいんですよ。クロードコードですね。 最初にやっぱりcloudド.MDを書い ていって、で、コードもだんだんこう育っ ていく。で、cloud.MDもですね、 それに追従するようにですね、え、僕は あの今のソースコードの状態を cloudド.MDに書いてとかっていう のを都指示してたんですね。ま、これも 多分クロードコードの方で自動化すること はできたと思うんですけど。はい。えっと 、機能の方はですね、標準装備となって いるようです。で、セキュリティ脆弱性 キャンンっていうところもですね、リアル タイムでセキュリティリスク検設っていう ところもやってくれます。で、 コーディング規約違反のチェック、一貫性 のあるコードスタイルを維持。これはです ね、えっと、リンターっていうのがあると 思うので、ま、そのリンターをですね、 定期的に動かしてるということですね。で 、インフラ構成コードの自動生成。これ すごいですね。インフラも でテラホームとかを書いてくれ るっていうことなのかな。最適なインフラ をAが提案って書いてありますが。ま、 これちょっと後で使用書とかドキュメント を見ていきましょう。はい。ということで ですね、え、実はエンジニア あの単純にコードだけ書いてるわけでは ないですっていうところではい。実は プログラミングの仕事っていうのはですね 、単にプロダクトの行動を書くだけでは なくて、それが本当に動くのかどうかって いうところをですね、え、検証もしないと いけないしで、それについての資料も、え 、変えて残しとかないといけないしで、 セキュリティも安全なのかどうか、見とか なきゃいけないし。はい。コーディングも ですね、コーディングルールっていうのを プロジェクトで定めてやっていて、ま、 チームで開発するので、この辺のですね、 ルールとか取り締まりもしていかないと いけないし で、単にですね、行動をですね、文字だけ 書いてる ような仕事に見えて、ちゃんとそのコード だけでは動かないので、インフラを準備 するところだったり、管理するところだっ たり結構大変なですね、実はいろんな タスクに分かれています。で、それらを",
      "topic_category": "技術解説",
      "title": "新時代AIエディタAWS Kilo",
      "summary": "バイブコーディングからの脱却！AI設計図駆動開発を実現するAWS Kiloを紹介",
      "key_points": [
        "AI設計図駆動開発",
        "自動テスト・ドキュメント生成",
        "セキュリティ脆弱性スキャン"
      ],
      "technical_level": "intermediate",
      "contains_demo": true,
      "contains_code": false
    },
    {
      "index": 3,
      "start_seconds": 1202.76,
      "end_seconds": 1803.679,
      "start_timestamp": "00:20:02",
      "end_timestamp": "00:30:03",
      "duration_seconds": 600.9190000000001,
      "original_text": "ですね、人間はそのコード、コードを書 くっていうところではなくて、プロダクト 全体をどういかに早くリリースしていい 機能をこう充実させるかっていうところに ですね、こうフォーカスするためにこの辺 全部エージェントフックがやってくれます 。はい。で、これ例えばですね、1回やっ て終わりの作業じゃないのでめちゃくちゃ コストかかるんですよ。毎回なんですよ、 これ。なんで面倒な定型作業、自動化 できる定型作業1つずつこのエージェント フックがやってくれます。で、これ、ま、 見ていただくとお分かりかと思うんです けど、結構その定型作業で片手間にやっ てる割には結構重要な作業なんですよね。 あの、実はコード書くのもめっちゃ重要な んですけど、テストするのってもちろん それが動かすために、え、必要なことで なぜそれが動くのかっていう担保になるの で、この辺は超大事なんですけど、こう いうのですね、片手間にやってたり時間が ないあ合間にやってると、あの、めっちゃ ヒューマンエラー起こすんで、ま、こう いうところをですね、どんどんどんどん、 え、エージェントたちにこう自動化させて いってるわけですね。なんでこの コンセプトはすごいいいと思います。 かなりこのというですね、AI駆動開発 エディター、え、だいぶエンジニアの仕事 が、え、モーラされてますし、あのフロー も作業フローもですね、完全にあの、 ちゃんともう現場の声がですね、入った ように思えるツールとなっております。え 、エデタ 、ま、ちょっと行動書くとかちょっと プラグインとか入れて、まあなんか便利に 少し行動書くの便利になってるんじゃない ぐらいの、え、今までのこう、ま、価値観 っていうかだったらそう思うと思うんです けど、もうこれはエデターというか コーディングエージェント のもうフルセットみたいな感じになって るってことですね。 はい。 じゃあまず、ま、そんなですね、結構色々 入っててすごい素晴らしい こうキロなんですけど、じゃあ今までもう そういう 似たようなAIコーディングアシスタント ありましたよね。はい。カーソルだったり はい。ギッドハブコパイロットだったり はい。クラインとかもありましたし。じゃ 、キロはですね、一体何なのかっていう ところですね。はい、比較してみたいと 思います。 でも結論から言うとキロは何を作るかを 考える戦略的パートナーとして、え、考え ていただくと分かりやすいのかもしれませ ん。はい。じゃ、キロトですね、従来の コパイロットだったり、カーソル、エア アシスタントと呼ばれていたところとです ね、ちょっと比較する図を乗っけてるん ですけど、ま、キロはですね、いわゆる、 ま、ここ建築化って書いてあるんですけど 、アーキテクトはい、アーキテクトです。 プロダクトのアーキテクト エージェントです。なのでアプローチとし てはまず設計図全体の設計図からこいつは 作るわけですよ。でもコパイロがカーソ ルってどっちかっていうとコード保管って いうところから始まったりとか、え、もう すでにあれですね、リポジトリーとか コードプロジェクトとかの部分的な機能 追加とか、え、そういうところから徐々に こうやっていったと思うんですけど、これ もですね、実際多分 、ま、今から思うと昔ってやっぱ コパイロトだったりカーソルが出た時って やっぱりLLMがそんなに今ほど コンテキストウィンドウの幅がなかったの で、そんななんか全体を考えたりとか、 こう結構設計図から作るってやっぱり全体 的なところを考えながらやっていくと思う ので、結構コンテキストとか必要なのかな と思うんで、ま、もうですね、LLMが かなりこう進化した、え、もうAI、生成 AIブームからもう3年ぐらい経ってるん ですけどやっぱこのタイミングで出る、え 、エデタってそもそも、ま、LLMのさの 今使える性能が違うので、取るアプローチ がやっぱり大きいところから取りに行け るっていうのは、あの、この機能が出てき てすごい思いましたね。なんでフルカブの コパイロット君とかカーソル君とか、ま、 彼らもすごい優秀なんですけど、元々 LLMで実現できた部分っていうとの スタート地点がちょっと違うので アプローチがちょっと変わってきてる。 はい。で、ドキュメントに関してはい。 完全自動で同期っていうところと、ま、 コパイロットカーソルっていうのは手指導 管理であんまりドキュメントに放括されて ません。どっちかっていうとコード主体 っていう感じですね。 で、自動化に関してはキロはもうそんな 行動自動で書くなんて全然当たり前の時代 に生まれてるやつなんではい。もっと周辺 のですね、エンジニアってコード書くだけ じゃないでしょうっていうもっと大変な 作業いっぱいありますよね。で、そして 重要なところもいっぱいありますよねって いうところでテストセキュリティとかって いうところも自動化するようになってます 。で、従来のコパイロットカーソル君は、 ま、主にコード生成のみみっていうところ になってます。 で、強みなんですけど強みは品質性、一貫 性、ガババランスっていうところ と、え、コパイロットカーソルはもう コーディングに完全に、え、酔ってますっ ていうところですね。 はい。 で、キロは、ま、全体設計で、他のこれ までの従来ツールは個別対応っていう ところで、これが全然今までのこう コーディングアシスタント、コーディング エディター、エアエディターと全然違う ところはい。アプローチが全然違いますっ ていうところですね。 はい。じゃ、AWSが出してくれたこの エデター、金未来型、え、エデター、え、 AWS以外でも使えるのかっていうところ なんですけど、はい、心配ございません。 キロはオープンですっていうところで、ま 、そもそもVSコード5で、ま、見た目も ほぼVSコードです。拡張機能だったり テーマも、え、そのまま使えるので、ま、 すでにVSコードであったりカーソル使わ れてる方は、ま、乗り換えが結構簡単なん じゃないでしょうか。はい。で、え、 MCP対応ですっていうことで、はい。皆 さん大好きMCPはい。部の好きなAI モデルと自由に連携可能ということで、ま 、今までクラウドカードとかでですね、え 、 なれ、慣れていたMCPクラインとか カーサルとかにプラグインさせてる方おら れると思うんですけどはい。それもあの 標準で使えるということになってますと。 はい。で、あとはですね、ステアリング ルールズプロジェクト前にですね、AIの 振る舞えを細かく制御できますよっていう ことで、ま、あの、カーソルズだったり cloud.MDのあの、指示書ですね、 それを、え、このキロではステアリング ルールズっていう言い方をしてます。はい 。まさにこうなんて言うんですか、 カジ取りというか、ハンドルキ るっていうか。はい。こうAI、AI やっぱこうコードバーって暴走して書く こともあるので、ちゃんとですね、その 振る舞いをですね、細かく制御でき るっていう部分で、ま、これもいいところ かなと思います。っていうところでですね 、ま、AWSに縛られないモダンな柔軟な 開発環境っていう感じになります。 はい。じゃ、これでですね、エンジニアの 仕事ってどう変わるのかっていうところな んですけど、はい。ま、これまではですね 、えっと、 はい。え、ひたすらコードを書っていう 仕事が、ま、いわゆるプログラマー、 エンジニアって呼ばれたところなので、 どうしてもコードの量で評価されるんです よ。はい。あ、あの人めちゃくちゃすごい ベテランのプログラマーで、この プロダクトのもう8割はあの人が書いた コードなんだよとかまあまあそんなことが 言われたり言われなかったりするんです けどはい。コードの量でそのエンジニアの 利量みたいなところはえはい評価されます 。で反復的な作業に結構時間を費やしがち 、もしくはもう時間足りなくて、ま、やら ないよっていうことも、ま、あったりし ます。実際でバグ修正に追われる日々はい 。もうこれはですねはい。プログラマー、 エンジニア まあなんかこうはい。常にですね、こう エラーと障害と戦うっていう感じで はい。ま、デスマーチとか言われたりし ますけどはい。あとは技術的塞とですね、 戦い続けるっていうところですね。あの、 結構僕が、え、ま、今ってそんなに エンジニアの仕事がメインではやっては ないんですけど、あの、昔、え、 エンジニアをしていた頃に特にですね、ま 、スタートアップであったりとか、あとは ベンチャー企業とか、ま、いろんなところ で開発したことあるんですけどはい。常に",
      "topic_category": "技術解説",
      "title": "AI駆動開発エディタKilo",
      "summary": "Kiloと従来のAIコーディングアシスタントの比較とKiloの特徴解説",
      "key_points": [
        "Kiloはアーキテクト型AIエージェント",
        "自動化、ドキュメント同期など機能豊富",
        "VS Codeベースでオープンソース"
      ],
      "technical_level": "intermediate",
      "contains_demo": false,
      "contains_code": false
    },
    {
      "index": 4,
      "start_seconds": 1803.679,
      "end_seconds": 2405.0,
      "start_timestamp": "00:30:03",
      "end_timestamp": "00:40:05",
      "duration_seconds": 601.3209999999999,
      "original_text": "ですね、この技術的負債っていうものは ですね、え、どこの会社にもあります。 はい。結構ですね、立ち上げ当初とかは 結構勢いでですね、情熱を持ってみんな あの開発をですね、楽しみながらやってる んですけど、だんだん中盤差しかかる ぐらいですね。あのはい。この技術的負債 なんかよくわからないエラーとかですね。 あのもう運用でしかカバーできないバグを ですね、人がこうなんて言うんだろう。ま 、例えるならもうずっと穴の開いたバケツ にひたすら水組んでるみたいな状態になる んですけど。はい。これをですね、あの 業界用語では運用でカバーっていう言い方 をするんですが、 カバーしきれないんですね。で、 あの気づいていくんですね。あの、 エンジニアになる前はですね、システムっ てすごい全部機械というかプログラムが 自動で動いてる世界を想像するんですけど 、あ、結構人間が支えてる部分というか、 ま、お見越しを担いでる部分はやっぱり あるんだなっていうところをはい。実際に プロジェクトに入ると実感します。 Todoはい。ハトゥーのようにあの長く 残り続けるトtodoコメントとかでも ですね。はい。あの実際に皆さんが今はい 。使われているわからないです。この YouTubeっていうツールにもですね 実は技術的負債があるのかもしれないん ですけどはい。こういう一生残り続けるト todoコメントとかもまあったりします ね。はい。じゃこれがですね。じゃ、こう いう、ま、昨今のこのAI駆動開発であっ たり、ま、LLMを使った開発っていうの でどう変わるんやっていうところでですね 、はい。プログラマーからですね、AI アーキテクトにはい、進化します。 これはですね、何を言っているかって言う とですね、AIに的確な指示を出す職業 なります。はい。で、これはですね、想像 性と戦略で価値を生む。はい。もう何を 作るかで決まるっていうことです。もう どう作るかではないという。はい。どんな アイデアがあってそれをこうビジネスの この市場に出した時にどんだけ こうお金を生むのかであったりとかですね 。価値を生むのかであったりですね。人の 役に立つのかであったりですね。はい。 想像性、クリエイティビティと戦略。これ が大事になってきます。 で、システム全体の設計に集中すること ですね。単一のコードとかっていうよりは もう全体を見通すっていうのが、ま、大事 になってきます。なので、ま、少しですね 、ま、これまでってフルスタック エンジニア、バックエンド、え、フロント エンド、え、データ、インフラとか いろんな細分化されてたと思うんですけど 、もうこれ多分皆さんが、ま、AIを使い ながらですね、 ま、モーラ的にですね、全体を学んで、 あの、全体を見ないといけないっていう ことですね。なんでもうフルスタックです 。 はい。領域、あの、専業でバックエンド だけやりますとか、フロントエンドだけ やります。データだけやります。じゃ、 なくなる世界がもう訪れようとして るっていうことです。はい。で、3つ目 ですね。ビジネス課題の解決に注力という ところで、これ1番大事ですよね。あの、 なんでもう 言ってしまえば皆さんはもうプロダクト オーナーです。はい。ビジネスオーナー、 プロダクトオーナー はい。プロジェクトオーナーっていう感じ で 結局は、ま、動く行動を作 るっていうところまでがプログラマーの 仕事だったのかもしれないですけど、もう その先ですよね。 はい。ここもですね、やっぱりテック側、 ビジネス側っていうのがですね、こう従来 のこのIT業界分別れてしまいました。 で、そうですね、実際にこうアメリカで今 すごい活躍されている方たちは、ま、 イーロンマスクとかもそうかもしんない ですけど、ある程度ITの、え、ことが 分かってあり、分かったり、え、 プログラミングとかエンジニアリングをし たことがある人が、まあ、今経営の世界、 ビジネス、ビジネスの世界で、ま、成功し てると思うんですけど。はい。なんで エンジニアは別にコードのことだけを知っ てればいいとか、え、詳しい専門的な知識 だけっていうよりはじゃ、ビジネス課題の 解決っていうところに、ま、注力するよう になっていくわけですね。 で、これまでは、ま、チーム開発とかです ね、え、あったと思うんですけど、もう その作業をやってくれるパートがAIに 変わっていくと、ま、チームっていうより ももう全体としてで、AIと共業して生産 性を上げていくっていう方向に、ま、 シフトしていく 感じになるんではないでしょうか。 なんではい。これからは あの全部人間がする必要はないんですね。 結局このシステムの全体のもう監督的な 立ち位置と、ま、あとはビジネスオーナー 、え、企業家のような想像性であったり 戦略っていうところで、ま、 コンサルタントのようにビジネス課題の 解決のソリューションに注力するとはい。 で、AIとの共業コラボレーションをして いく。ま、これがですね、AI アーキテクトの仕事になっていくわけです ね。なので、もうこのプログラマーって いうのはですね、このエアアーキテクトの 中に、え、内放された。しかもそれが、え 、例えば今回のキロのような、え、ツール 君でもうそのですらもうプログラマーと 言いますか、単に行動レベルをもう抜け てるんですよね。はい。ま、コパイロット とか 昔の コパイロットぐらいが本当にプログラマー というか単にコードだけを書く。指示指示 された通りコードだけを書く。はい。ま、 別に、ま、テストを するわけでもなく、あの、機能を最適化 するわけでもなく、じゃあその例えば1つ の関数でもそれがどうビジネスの課題のに 役に立っているかも別に気にする必要は なく、黙々と行動。これがですね、従来の プログラマーのイメージであったり、ま、 実態だったりするんですけどはい。これも 変わりますと。これ本当に5年後 とかのレベルじゃない気がするんですよね 。なぜならもうAIの進化の方が早いので 。はい。 じゃ、もうどれだけ人は、ま、これまで プログラマーやエンジニアーと呼ばれてい た人は AIと協業できるかですよね。で、これ見 ていただくとですね、ま、もちろんこの こうプロダクトサービスを作る上ではどう しても、ま、コーディングの知識、 プログラミングの知識っていうのはいるん ですけど、ある程度基礎的な内容でいいか なと思います。あの、なぜなら、あの、 詳しいところはですね、AIが調査をし たりで、その結果に対して人が フィードバックをするので、あの、そこ まで 、なんて言うんですかね、こう、ま、あと LLMなので結構対話は何回でもできると 思うので、 あの、そんなに詳しくなくてもいいと思い ます。じゃ、逆にじゃ、どういう才能が あればってなってくると、やっぱ僕はです ね、この課題解決能力とどれだけAIと 共業できるか、AI通使い倒せるかって いうところですよね。この2つが結構、ま 、重要なんじゃないかなと思っていてなの で、もしかすると はい。あの、もうすでに何回か起業され てる方とか、あの、すごいサービスの企画 やられてた方がもうそのままこういうAI 駆動開発であったり、ま、もうキ露とか ですね、クロードコードとかですね、 もっと進化していくと思うので、そのもう 操縦席 というか、ま、F1みたいなやつに乗る 人の、ま、力量みたいなところで結構 ビジネス戦闘力かなと思うんすよ。って なった時にはい。もうマシン自体はですね 、あのアクセル踏めばめちゃくちゃ スピードも出てガードレールもあって ちゃんとセーフティにこうできるっていう 技術がなんとなく先に来るような気がして いるのでこの技術の進歩的に。で、ど、で 、徐々にそのコパイロットから始まり、え 、カーソルであったり、クライインであっ たり、クロードコードであったり、コード XiniCLIとかでAWSがこういう",
      "topic_category": "技術解説",
      "title": "AI駆動開発と未来",
      "summary": "AI時代におけるプログラマーの役割変化と必要なスキル",
      "key_points": [
        "AIアーキテクト",
        "ビジネス課題解決",
        "AIとの共業"
      ],
      "technical_level": "general",
      "contains_demo": false,
      "contains_code": false
    },
    {
      "index": 5,
      "start_seconds": 2405.0,
      "end_seconds": 3005.16,
      "start_timestamp": "00:40:05",
      "end_timestamp": "00:50:05",
      "duration_seconds": 600.1599999999999,
      "original_text": "すごいものを投入してきたわけですよね。 で、結構やっぱりあれですよね。その、ま 、ガーファムーって呼ばれているすごい ビッグテックの企業が本気でお金を出して こういうAIのエディターを作って しまえるんじゃないかっていうぐらいの、 ま、AIの進化と言いますかが早いので、 もうここはどうなるか分かりません。はい 。 ま、なのでエアアーキテクト これからはプログラマーを目指すんじゃ なくてエンジニアを目指すんじゃなくて はい。エアキテクと目指すのも1つの 目標かもしれません。はい。で、例えば エンジニアが顧客レビューシステムを実装 して最新のセキュリティ基準に準拠させて で言うとですね、キ路が了解しました。 2.0認証XS対策SQL インジェクション防止を含む設計図を作成 します。はい、 これが 未来の開発スタイルなんですね。 ということで、ま、作業から解放されより 想像的な仕事Aって書いてあるんですけど 、本当にこういう世界がはい。エンジニア の仕事。ま、現エンジニアですね。今で いうエンジニア 変わってくるっていうところで、いや、 本当に作業量多いんですよ。はい。 作業量多すぎるので はい。最初はですね、想像的な仕事、 クリエイティブな仕事がしたいと思って、 え、エンジニアにを目指すんですけど、 すごいだんだん専門的になってきましです ね。気がついたらあれ部分的にしかなんか コード書けないしアプリ、あ、これ全員が 全員じゃないんですけど アプリ全体を作るって結構色々勉強する 必要があるんだなっていうのに、え、 気づいてなん的なエンジニアになっていく んですけどはい。これからはもう想像力、 想像性、戦略、ビジネスの課題、解決能力 の時代であとはどれだけAIと はい、楽しくできるかっていうところに 変わってきました。 はい。で、今すぐこう未来を体験し ましょう。行動の書き方変わります。 は単なるツールじゃなくて開発の思想その ものを変える。ま、これは一種の革命で すって書いてくれてますね。はい。でです ね、ここであの実際に僕がデモをできれば 良かったんですけどはい。今ちょっと見て いただくとですね はい。ジョインあのウェイトリストの方に はい。登録はさせていただいてるんです けど、多分あまりの人気で今ダウンロード が制限されてるんですかね。どうなん でしょう?実際に技術ブログだったり YouTube見るともう疲れてる方いた んではい。昨日とかまではできたん でしょうか。 っていうことで、あの実際にあ、この ドキュメントとかもですね、ちょっと見て いきましょうか。はい。あ、これちょっと 動画見てからの方がいいですね。 動画見てみましょう。 はい。さっき 説明したスペックスっていうのが使用書の ことですね。 で、フックスとステアリング。 えっとですね、デモが ちょっとデモンがどっかに行きましたね。 あ、あった。これだ。ウォッチデモン。 少々待ちよ。 ちょっとデモをですね、かけながら実況動画していきたいと思います。はい、パミ V スコーズと一緒です。はい、この機能のアイコンはこのゴーストマークお化けのアイコンを同しです。 Nowckthegenerate steeringbutton promptはい。このエディターもです ね、ま、左側に、え、サイドバーがあって 、え、ま、サイドバーで開いているところ とかファイルのツリーとかGitubの3 が見れて、で、真ん中には、え、コードの 、え、エデター画面ですね。 で、右側にキロの対話セッションのところのはい、チャットが表示されているので、ま、より結構今までのデザインとかは特にですね、あの確信的な感じではなく親しみやすいデザインになってるかなと思います。 steeringfolder. Thesefilesdescribea servessfullstackweb appthatweusingwitha nextJSandaAWS backend.Letmeshow youoneofourpowerful featuresspec. はい。でですね、このキルをですね、あの スタートさせる時にバイブモードなのか スペックモードなのかっていうところで はい。バイブモードはですね、ま、 チャットで対話しながら、ま、バイブ コーディングっていう、え、機能もあり つつでスペックっていうのが、ま、これ まで話したこう機能の、え、心臓部分です ね、確信部分で、ま、まず計画とか、え、 ま、ビルドに必要な、え、設計書、使用書 っていうのを、え、デザインしてから コードを始める前に、コーディングを 始める前にデザインしてからやっていく モードのこの2種類が選べるそうです。 appogle usepure generatedrequいこで ですね、今このエディターの上のに3つ 映ってるんですけど、リquire デザインタスクリストっていうところで、 え、要件定義設計タスクっていうところで さっき説明したあ のワークフローの流れになってますね。で、今このリクワイアメンツっていうところで、ま、要件義をしてるようなこのデモの画面になります。 はい。で、今ので要件定義のフェーズが 終わっていて、で、1発でその に、え、こういう、え、サービス作りたい んだって言った時に、え、リquンツ ドキュメントをバーって出してくれて、で 、それを人間がチェックして、え、ま、 足りてない、え、要件だったり追加したい 要件っていうのをここのエディターでこう 追加修正する。 で、その後もデザインの、え、フェーズに流れていくっていうような感じになってます。で、さっきのはデザイン画面なんですけど、ま、これ全てですね、あの、マークダウンで宝で書けるので、ま、結構編集もしやすいかなと思います。 で、今タスクのタスクリストを作るフェーズに来ていますね。ete one。 はい。これがですね、1個1個あの、え、 タスクをですね、切ってくれていて、急で 例えばタスク1セットアップ、 Google、え、 インフラストラクチャー コンフィギュレーション、インフラの設定 みたいなこの1個のタスクがあって、それ を、えっと、ま、順番に、え、1つ1つ 実行していくような感じで、ま、上から 順番にこのタスクを書いてってくれてる そうですね。で、ま、1つこのタスク名、 え、が書いてあって、その中にどういう ことをするのか、例えばこれだと Googleのアイデンティプロバイダー と、え、コニッションUSザerpool inCDKって書いてあるんですけど、ま 、それを追加する作業であったり、え、 Googleのクライアント クレデンシャルとスペースの設定、あとは 、え、supported identifyproviders inclルGoogleなんか更新する ようですね。で、これはですね、 リクワイアメントの5.1、5.2、 5.3、5.4を満たすためのタスクです よっていうところで、え、 リクワイアメントの、えっとですね、番号 とこう位置してるような感じになってます 。 WhileitworksI'llset everythingupinside theGoogleCloud consoleoutsidethis video. It'sbeenafew moments.We'renowin taskfiveandit's updatingthePrisma updatetoincludethe Googleaccount. Great,it'snow completedallthe tasks.Ididafew updatesduringeach tasktomake everythingworking.",
      "topic_category": "デモ",
      "title": "AIエディタ「キロ」デモ",
      "summary": "AIエディタ「キロ」の機能とワークフローを紹介",
      "key_points": [
        "要件定義からの設計",
        "タスクリスト自動生成",
        "マークダウンでの編集"
      ],
      "technical_level": "intermediate",
      "contains_demo": true,
      "contains_code": false
    },
    {
      "index": 6,
      "start_seconds": 3005.16,
      "end_seconds": 3607.039,
      "start_timestamp": "00:50:05",
      "end_timestamp": "01:00:07",
      "duration_seconds": 601.8790000000004,
      "original_text": "Andnowlet'stakea lookattheoutput. Here'sthe application.Ithas newsigninwithGoogle button.Allthe backendandructure hasbeencompleted becauseofK はい。これで、えっと、 Google 認証の方今作ってた感じですね。で、アウトプットを確認してくださいっていうところになります。 testthelogin.It looksgood. Thisnextfeatureis reallyhelpful.It's calledagenthooks.To getstarted,I'll clickthelittleghost icononthelefthand sideandthenI'll clickthelittleplus arrownexttoagent hooks.Iwantthishook tocreatetests anytimeIsavethe componentiftheynot alreadythere.So,I'm describethisinthe promptonfilesavea fewbasictestalready createdforeachcomp. はい。これはですね、あの、エージェント フックの機能の説明になっていて、え、 サイドバーのところからフックっていうの を選んでいって、で、ここにですね、どう いうフックが必要なのかっていうのをです ね、え、自然言語でこれも指示することが できるそうです。これ結構便利そうですね 。はい。 えっと、ファイルをセーブする時に、えっと、ま、ユニットテストですかね、基本テストを追加してくださいとか、え、はい。全てのコンポーネントに対して追加してくださいみたいな指示してますね。 SoI'mgnaseeitnow insidetheKirofolder thisnewhooksandthen Icangiveitatry.So I'mgoingtogointoone ofmycomponentsand I'mjustgnaaddaquick commenttoitandmake sureitworks.SoI'm gnatypeintest commenthereandthen I'mgnaopenupthetask listandyoucanseeit runninginthe backgroundhereand I'llstartcreating thetests.Thiswill justtakeafew moments.Here'sthe newtest,theGoogle signinbuttontest.I lookthroughit. Createdsever agook withconctionand beond はい、ということで これはなんでアイコンがゴーストなの かっていうところなんですよね。 この多分も多分なんか意味あると思うん ですけど。ちょっとまだ分かってないん ですけど。はい。これが1連のですね、白 の、え、説明でした。 はい。こんな感じでですね。え、 ま、全然これまでと、あの、ちょっと アプローチが違うAIエディターの登場な んですけど、 もう単にコード生成するだけで驚いてちゃ 、ま、ダメだよっていうところで、 おそらくですね、 あの、 最近やっぱり僕は結構1ヶ月ぐらいほぼ 毎日こうバイコーディングをクロード コードでやってみたんですけど、 ま、思うところはですね、これ プロダクションコードは結構きついぞって いうのはちょっと思っていて、 で、さあ、なんでかって言うとですね、 やっぱりそのちゃんと設計書がある中で 作っていかないとやっぱどんどんどんどん こう道にそれてったりはまっちゃったりし た時に進まなくなってくんですね。 で、やっぱりコンテキストウのこう制限も あるので、ま、少し前にもうバイブ コーディングはもう古いのかっていう、え 、動画を出したんですけど、ま、そこで あの 話してる内容はほとんどコンテキスト エンジニアリングの内容なんですけど、ま 、そうです。コンテキストエンジニアリン グっていうのが必要になるよね。つまり LLMにどう構造化された指示をであっ たり設計の内容を、ま、伝えるかっていう ところがですね、結構肝になるなっていう のは、え、ま、大きなシステムであったり 、実際にこう 世の中に出していくシステムにとって すごい大事な部分。ま、そしてテストです よね。テストをちゃんと書いて動くことが 保証担保されるようなコードもつけながら でそれの使用書もちゃんと更新したやつを 載せながら、え、世の中に出していくって いうことが結構大事かなっていうので、ま 、単にですね、ちっちゃなゲームを作るで あったり、テトリスを作ってみるとか、え 、todoアプリを作ることに関しては別 にこんなになんて言うんですかね、使用書 というか、あの、コンテキスト エンジニング特に考えなくてもできる。 もうそうですよね。チャットGPTとか クロードのあのツールとかでもできると 思うのではい。ま、そういうものではなく て実際に動く、実際にサービスとして、ま 、お金を稼いでいくものであったりとか 価値を産んでいくもののっていうのは、ま 、ある程度この使用書、設計書で、あとは テストで周辺環境の、え、定型作業って いうのをどれだけですね、うまいこと、 AIの力を借りて、え、個別に潰していく かっていうところが結構重要だなっていう のは、ま、この1ヶ月間ぐらいずっと、ま 、思っていたことで、ま、それが、ま、 AWSから製品化されたっていう感じの今 感想を持ってます。で、まだ実際にですね 、僕が触れていないので、あの、触った 所管っていうところとか感動とかっていう のはまだお伝えできないので、あの、ま、 一応これは今世の中、あの、世の中に出て 3日ぐらいのあの情報を、え、頑張って 集めて作った内容になります。はい。なん でま、これもですね、もですね、1ヶ月 ぐらいちょっと使ってみて、いや、実際 この エージェントフックとかどこまで使えるの かとか、使用食堂開発、スペック 、スペックドリブン デベロップメントがどこまでいける のかっていうところは、ま、楽しみなん ですけど。はい。ま、それもですね、昨日 実践シリーズまた作ってやっていけたらな と思いますのでお楽しみにしてください。 はい。じゃ、まずはですね、あの皆さん はい、無料で使えますので、このウェイト リスト興味ある方はウェイトリスト登録し て実際にこのバイブコーディング、あの、 もうバイブコーディング多分もうこの先 流行らないのではい。バイアブル コーディング、価値あるコーディング開発 、あの、どんどんやっていきたらいいなと 思います。 はい。 なんかサイトもおしゃれですね。可愛い ですね。なんかこのお化け もうゴーストライターってことですよね。 もうこの子がプログラミングゴーストライ ターってことを僕はあの 意味してるんだと思うんですけどはい。 はい。マイグレーティングフfromvs ということであのvsからの マイグレーションは以降も簡単だよみたい なところの説明もあったりします。ま、 まずはですね、ちょっとダウンロードして みてちょっと触ってみるのはいかが でしょうか。はい。 いや、このフック、フックを結構 プロポotトで作れるの結構いいすよね。 ま、要はクロードコードで今までやってた こうスラッシュコマンド作るとか cloud.MDにあのテストドリブン 開発TDDで作ってねっていうのを指示し てたみたいな感じで、もうそんなん標準 装備 自動でやるよっていうところですよね。の はい。 いや、このフックをだいぶ はい。ファイルの保存、新しいファイルの 作成、ファイルの削除こういうイベントに 対してですね。はい。一貫したコード品質 。 イベント検出プロンプ実行 自動アクションこれ便利ですよね。 の種類はどんなのがあるんでしょうか? ファイル保存 うん。こういうイベントを先に書いて じゃ例えばJavascriript タイプファイルがセーブされる時に、え、 テストファイルを作ってください。 で、アップデートテestトtoma",
      "topic_category": "技術解説",
      "title": "エージェントフック機能解説",
      "summary": "AIエディタの新機能、エージェントフックの使い方と利点を解説",
      "key_points": [
        "エージェントフック",
        "自動テスト生成",
        "ファイル保存時トリガー"
      ],
      "technical_level": "intermediate",
      "contains_demo": true,
      "contains_code": true
    },
    {
      "index": 7,
      "start_seconds": 3607.039,
      "end_seconds": 4209.12,
      "start_timestamp": "01:00:07",
      "end_timestamp": "01:10:09",
      "duration_seconds": 602.0809999999997,
      "original_text": "coveragefor anyニューフンクションと テストをアップデートしてください。 はい。 ファイル削除時。 これいいですよね。 コンポネントファイルが消された時に、 え、 インポートの部分を探してくださいね。で 、ちゃんとリムーブしてくださいね。 もしくは、え、コメントアウト、 インポートステートメントしてくださいね 。 みたいな感じで書けるのか。これいいです ね。 ま、こんな感じで色々ありますと、なんか ブログもあるんですかね。 あ、キロハッカンとかやるんですね。これ 面白そうですね。 100100、1000万、10万、 10万ドル プライズ 10万、1500万ぐらいですかね。 これどこが白火損主取主催するんでしょう か? ま、これも本当にそうですよね。こういう ハッカがなぜ行われるのか、こんな高い 賞金を設けてまで、ま、つまりはどこまで こういうAI駆動開発ができる才能 、ま、要は次の要は今 エンジニアって結構結構年収高いイメージ あると思うんですけど、アメリカとか シリコンバレーだったら普通に年収 56000万円とかの人いると思うんです けど、ま、次のそういう人たちの発見の場 ですよね。 あ、すごいハッカソンこれ何でもいい らしいです。テーマないんで。キルを使っ て実際に動作するアプリ構築。 で、あ、カテゴリーはあるのか。生産 セットフローツールと ゲーメントエンタメ で教育アプリ。教育アプリいいじゃない ですか。あの、あ、これ勝手に僕が テンション上がってるだけなんすけど。 はい。ワイルドカード。他に累を見ない ユニクな。ま、つまりこのよくある生産系 、生産性を向上するツールかゲーム エンタメか、え、教育アプリかであとは もう何でもいいよと同技も抜くものになっ たら何でもいいよっていう感じで はい。1人でもチーム最大3名でも参加 できるそうですね。 はい。 ま、開発者でもいいし、創業者、企業家、 デザイナー、学生はい。なんでもいいです と。 審査審査員団はティムルスカ アンシエシンバラアンジョン サンティアゴパトラーマジェフなど専門家 を踏む誰も知らないですね。ま、多分有名 な人なんだと思いますが。 あ、締め切り8月25日前なんで、あの、 全然間に合うと思います。 はい。もしこの動画を見て、よっしゃ、 キロやってみようって思う方、あの、 腕試しにこういうハッカ、ま、コンテスト ですね。アイデアコンテストで作ったもの を出してはい。 ま、デモ動画とギッアブリポジトリー とあとは、ま、プロジェクトドキュメント 、ま、プロジェクトドキュメントAIで 作ったらいいと思うんで、で、デモ動画を 、ま、 触りながらやったらいいと思うんで、 ま、結構 ハード いくんじゃないでしょうか。これ出てみて もいいですね。キロハッカ出てみた系配信 。 はい。こんな感じでですね、今日は 一旦キロの紹介をですね、 終わろうかなと思います。 とですね、最後に 、ま、ほとんど僕のこのライブ配信を最後 まで見てくださる方っていうのはあまり 、まだまだおられないんですが、 ま、ちょっと宣伝と言いますか、ま、これ 何回かあの ライブ配信でも出てきたかなと思うんです けど、あのLPを作っていてですね、ま、 僕AIの講師をやっているんですけどAI の技術顧問もやってます。で、あの開発も 今やったりはしてるんですけど、ま、大体 その3つですね、教育、コンサル、ま、 エンジニアリング、ま、3つやってるん ですけどと、ま、あとYouTubeか はい。あの、ま、こんな感じで、これも ジェンスパークで作ったLPなんですけど 、心AIっていうのではい、企業のAI 導入加速する技術顧問サービスっていうの をはい、やっております。で、これ結構 おかげ様であの契約してくださる方、え、 結構、ま、契約してくださる方というか、 契約してくださる企業の企業様は結構おら れて結構人気なんですけど、ま、気になる この動画を見られていって気になる方おら れました。こっから無料相談できるので、 あの、適当に枠を取っていただいてご相談 いただいても大丈夫です。で、ここに、ま 、僕のプロフィールも載ってます。で、僕 はあんまりこの動画で自己紹介を全然して ないんですけど、あの、ま、こういう感じ のキャリアではい。いろんなこと、AIに 関するいろんなことをやっています。 はい。 で、料金プランもですね、結構あの、ま、 正直こういうAIの技術顧問サービスって どれぐらいかかるのってよく聞かれること がすごいありまして、あの、こんな感じで 今やっているところはですね、ま、オン ラインに限るんですけど、ま、スラックの 相談、え、ま、チャットでサポートする、 え、24時間、ま、対応って書いてあるん ですけど、24時間以内に返しますって いう感じでいつ、あの、相談していただい てもいいんですけど、まま、スラックの 相談っていうのところとあとオンラインの 、え、面談っていうのをセットで基本 サービスとして提供させていただいてます 。で、料金シミュレーションなんですけど 、ま、こんな感じで、あの、ま、一応これ 企業向けなので、ま、個人の数でもし受け たいなって思われる方来られれば、えっと 、週1回相談とかでス落相談24時間とか だと、ま、これぐらいの金額から、あの、 受けさせていただいてます。で、ま、面談 の頻度もですね、ま、各習でイやとか1回 でイアってなると、ま、あの、最小金額 これぐらいから始めれますので、はい。 あの、ま、個人の方とかですとね、え、 ちょっとオンラインの AIオンラインコースどれ行っていいか わかんないとか、あの、月1であのAIの 勉強方法であったり、こうアドバイス みたいなさせていただくこともこういうの で可能ですので、結構使い方は色々あると 思います。で、ま、会社企業の方ですと、 あの、社員の方に、えっと、週1回こう いうAIの 、ま、講義とか、あと質問先っていうのを 作っていただいて、ま、AI教育とかに 使っていただいてもいいですし、あの、 色々おられます。あの、経営者の方もおら れますし、え、実際にあの従業員の方に、 え、 AIのこうレッスンさせていただくことも あって、結構柔軟にいろんな 金額と あの、ま、対応の幅は色々ありますので、 この辺のシミュレーターを使って いただければいいかなと思います。でです ね、ま、え、ま、教育とか技術顧問以外に も、ま、AI開発プロジェクトの自宅で あったり、え、個別コンサルティング、 あとは車内研修とか、ま、ちょっとAI どっから始めていいか分からないんで、 ワークショップとか公演の依頼とかもこの 辺から、ま、これオプションサービスなん ですけど、一旦ここから、ここであの基本 サービス を、え、契約していただいている方優先で 、この辺のオプションサービスは個別で、",
      "topic_category": "まとめ",
      "title": "キロハッカソンとAI顧問サービス",
      "summary": "キロハッカソン紹介とAI技術顧問サービスの宣伝",
      "key_points": [
        "キロハッカソン参加推奨",
        "AI技術顧問サービス紹介",
        "料金プラン説明"
      ],
      "technical_level": "general",
      "contains_demo": false,
      "contains_code": false
    },
    {
      "index": 8,
      "start_seconds": 4209.12,
      "end_seconds": 4384.36,
      "start_timestamp": "01:10:09",
      "end_timestamp": "01:13:04",
      "duration_seconds": 175.23999999999978,
      "original_text": "あの、ちょっと相談しながら進めさせて いただくっていうこともあります。 はい。で、契約条件もですね、これも同一 なので、はい。あの、 ここの契約条件に沿っていただけたらなと 思います。 はい。お問い合わせ、無料相談。はい。 AIの専門家があなたのビジネスの課題を 解決しますっていうところで、はい。ここ で、あの、このYouTubeの チャンネルリンクもあるので、はい。ま、 なんかこの辺を見ていただいて、えー、僕 の授業受けたいなっていう方とかちょっと 会社に、あの、呼んでいただけたら、あの 、嬉しく思いますので、はい。この辺も ちょっと見ていただけたらなと思います。 えっとこのこれジェンスパークで自分の LP作ったんですけど、ま、結構思った より、あの、このデザイン結構気に入って いて、で、ま、あの、問い合わせとかも ですね、これ スピアーとリンクしてるんで、 僕の予定の開いてるところを出してくれる んで、取れるんですよね。 はい。こんな感じで、 ま、あとかなりシンプル目なデザインを 作ってジェンスパークが作ってくれたので 、あんまりごちゃごちゃしてなくて、結構 分かりやすくてはい、気に入ってます。で 、よくですね、これも一種の自動化で、 よくその見積もりを結構聞かれることが ありまして、こういうコモンとか教育 サービスやってますって言うとで、毎回 それを計算する僕の中ではもうその公式は 一緒なんで、あの、人数の違いとか頻度の 違いだけで、あの、見積もりさする ロジックはいつも一緒なので、はい。この 辺で あの 見積もりやってでこれPDFで保存できる んでこのままお送りするとま、このLP 自体が見積もり書になるという感じになっ てますね。はい。とか、ま、契約条件も ですね、毎回同じなので、同じこと何回も ちょっと説明するのがあれなので、こう いう感じでLPにしてみました。 はい。ま、ここからもですね、無料相談 申し込みの、ま、ご興味がある方おられれ ば是非このチャンネルから来ていただけ たらなと思います。じゃ、今日はですね、 あ、結構いい 時間の配分で終われそうですね。 じゃあ、11時23分ということで、今日 はこれで終わりにします。ありがとう ございました。",
      "topic_category": "技術解説",
      "title": "LP作成と自動化",
      "summary": "LP作成ツールと見積もり自動化の活用事例を紹介",
      "key_points": [
        "LP作成(ジェンスパーク)",
        "見積もり自動化",
        "問い合わせ自動化(スピアー連携)"
      ],
      "technical_level": "general",
      "contains_demo": false,
      "contains_code": false
    }
  ]
}